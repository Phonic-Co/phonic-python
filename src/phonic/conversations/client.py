# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.outbound_call_config import OutboundCallConfig
from .raw_client import AsyncRawConversationsClient, RawConversationsClient
from .types.conversations_outbound_call_response import ConversationsOutboundCallResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ConversationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawConversationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawConversationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawConversationsClient
        """
        return self._raw_client

    def outbound_call(
        self,
        *,
        to_phone_number: str,
        config: typing.Optional[OutboundCallConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConversationsOutboundCallResponse:
        """
        Initiates a call to a given phone number.

        Parameters
        ----------
        to_phone_number : str
            The phone number to call in E.164 format.

        config : typing.Optional[OutboundCallConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationsOutboundCallResponse
            Success response

        Examples
        --------
        from phonic import OutboundCallConfig, Phonic

        client = Phonic(
            token="YOUR_TOKEN",
        )
        client.conversations.outbound_call(
            to_phone_number="+19189397081",
            config=OutboundCallConfig(
                agent="support-agent",
                welcome_message="Hi {{customer_name}}. How can I help you today?",
                system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables={"customer_name": "David", "subject": "Chess"},
                voice_id="sarah",
                no_input_poke_sec=30,
                no_input_poke_text="Are you still there?",
                no_input_end_conversation_sec=180,
                boosted_keywords=["Load ID", "dispatch"],
                tools=[],
            ),
        )
        """
        _response = self._raw_client.outbound_call(
            to_phone_number=to_phone_number, config=config, request_options=request_options
        )
        return _response.data


class AsyncConversationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawConversationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawConversationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawConversationsClient
        """
        return self._raw_client

    async def outbound_call(
        self,
        *,
        to_phone_number: str,
        config: typing.Optional[OutboundCallConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConversationsOutboundCallResponse:
        """
        Initiates a call to a given phone number.

        Parameters
        ----------
        to_phone_number : str
            The phone number to call in E.164 format.

        config : typing.Optional[OutboundCallConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationsOutboundCallResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic, OutboundCallConfig

        client = AsyncPhonic(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.conversations.outbound_call(
                to_phone_number="+19189397081",
                config=OutboundCallConfig(
                    agent="support-agent",
                    welcome_message="Hi {{customer_name}}. How can I help you today?",
                    system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
                    template_variables={"customer_name": "David", "subject": "Chess"},
                    voice_id="sarah",
                    no_input_poke_sec=30,
                    no_input_poke_text="Are you still there?",
                    no_input_end_conversation_sec=180,
                    boosted_keywords=["Load ID", "dispatch"],
                    tools=[],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.outbound_call(
            to_phone_number=to_phone_number, config=config, request_options=request_options
        )
        return _response.data
