# This file was auto-generated by Fern from our API Definition.

import os
import typing

import httpx
from .conversations.client import AsyncConversationsClient, ConversationsClient
from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .environment import PhonicEnvironment
from .raw_client import AsyncRawPhonic, RawPhonic
from .types.conversation_evaluation_result import ConversationEvaluationResult
from .types.create_agent_request_audio_format import CreateAgentRequestAudioFormat
from .types.create_agent_request_configuration_endpoint import CreateAgentRequestConfigurationEndpoint
from .types.create_agent_request_template_variables_value import CreateAgentRequestTemplateVariablesValue
from .types.create_agent_request_tools_item import CreateAgentRequestToolsItem
from .types.create_tool_request_execution_mode import CreateToolRequestExecutionMode
from .types.create_tool_request_type import CreateToolRequestType
from .types.delete_agents_name_or_id_response import DeleteAgentsNameOrIdResponse
from .types.delete_extraction_schemas_name_or_id_response import DeleteExtractionSchemasNameOrIdResponse
from .types.delete_projects_name_or_id_response import DeleteProjectsNameOrIdResponse
from .types.delete_tools_name_or_id_response import DeleteToolsNameOrIdResponse
from .types.extraction_field import ExtractionField
from .types.get_agents_name_or_id_response import GetAgentsNameOrIdResponse
from .types.get_agents_response import GetAgentsResponse
from .types.get_conversations_id_analysis_response import GetConversationsIdAnalysisResponse
from .types.get_conversations_id_evals_response import GetConversationsIdEvalsResponse
from .types.get_conversations_id_extractions_response import GetConversationsIdExtractionsResponse
from .types.get_conversations_id_response import GetConversationsIdResponse
from .types.get_conversations_response import GetConversationsResponse
from .types.get_extraction_schemas_name_or_id_response import GetExtractionSchemasNameOrIdResponse
from .types.get_extraction_schemas_response import GetExtractionSchemasResponse
from .types.get_projects_id_conversation_eval_prompts_response import GetProjectsIdConversationEvalPromptsResponse
from .types.get_projects_name_or_id_response import GetProjectsNameOrIdResponse
from .types.get_projects_response import GetProjectsResponse
from .types.get_tools_name_or_id_response import GetToolsNameOrIdResponse
from .types.get_tools_response import GetToolsResponse
from .types.get_voices_id_response import GetVoicesIdResponse
from .types.get_voices_response import GetVoicesResponse
from .types.outbound_call_config import OutboundCallConfig
from .types.patch_agents_name_or_id_response import PatchAgentsNameOrIdResponse
from .types.patch_extraction_schemas_name_or_id_response import PatchExtractionSchemasNameOrIdResponse
from .types.patch_projects_name_or_id_response import PatchProjectsNameOrIdResponse
from .types.patch_tools_name_or_id_response import PatchToolsNameOrIdResponse
from .types.post_agents_response import PostAgentsResponse
from .types.post_conversations_id_cancel_response import PostConversationsIdCancelResponse
from .types.post_conversations_id_extractions_response import PostConversationsIdExtractionsResponse
from .types.post_conversations_outbound_call_response import PostConversationsOutboundCallResponse
from .types.post_conversations_sip_outbound_call_response import PostConversationsSipOutboundCallResponse
from .types.post_extraction_schemas_response import PostExtractionSchemasResponse
from .types.post_projects_id_conversation_eval_prompts_response import PostProjectsIdConversationEvalPromptsResponse
from .types.post_projects_response import PostProjectsResponse
from .types.post_tools_response import PostToolsResponse
from .types.put_agents_upsert_response import PutAgentsUpsertResponse
from .types.task import Task
from .types.tool_parameter import ToolParameter
from .types.update_agent_request_audio_format import UpdateAgentRequestAudioFormat
from .types.update_agent_request_configuration_endpoint import UpdateAgentRequestConfigurationEndpoint
from .types.update_agent_request_template_variables_value import UpdateAgentRequestTemplateVariablesValue
from .types.update_agent_request_tools_item import UpdateAgentRequestToolsItem
from .types.update_tool_request_execution_mode import UpdateToolRequestExecutionMode
from .types.update_tool_request_type import UpdateToolRequestType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Phonic:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    environment : PhonicEnvironment
        The environment to use for requests from the client. from .environment import PhonicEnvironment



        Defaults to PhonicEnvironment.DEFAULT



    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from phonic import Phonic

    client = Phonic(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        environment: PhonicEnvironment = PhonicEnvironment.DEFAULT,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("PHONIC_API_KEY"),
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        if api_key is None:
            raise ApiError(
                body="The client must be instantiated be either passing in api_key or setting PHONIC_API_KEY"
            )
        self._client_wrapper = SyncClientWrapper(
            environment=environment,
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawPhonic(client_wrapper=self._client_wrapper)
        self.conversations = ConversationsClient(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawPhonic:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPhonic
        """
        return self._raw_client

    def get_agents(
        self, *, project: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAgentsResponse:
        """
        Returns all agents in a project.

        Parameters
        ----------
        project : typing.Optional[str]
            The name of the project to list agents for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_agents()
        """
        _response = self._raw_client.get_agents(project=project, request_options=request_options)
        return _response.data

    def post_agents(
        self,
        *,
        name: str,
        project: typing.Optional[str] = None,
        phone_number: typing.Optional[typing.Literal["assign-automatically"]] = OMIT,
        timezone: typing.Optional[str] = OMIT,
        voice_id: typing.Optional[str] = OMIT,
        audio_format: typing.Optional[CreateAgentRequestAudioFormat] = OMIT,
        audio_speed: typing.Optional[float] = OMIT,
        welcome_message: typing.Optional[str] = OMIT,
        system_prompt: typing.Optional[str] = OMIT,
        template_variables: typing.Optional[typing.Dict[str, CreateAgentRequestTemplateVariablesValue]] = OMIT,
        tools: typing.Optional[typing.Sequence[CreateAgentRequestToolsItem]] = OMIT,
        tasks: typing.Optional[typing.Sequence[Task]] = OMIT,
        no_input_poke_sec: typing.Optional[int] = OMIT,
        no_input_poke_text: typing.Optional[str] = OMIT,
        no_input_end_conversation_sec: typing.Optional[int] = OMIT,
        boosted_keywords: typing.Optional[typing.Sequence[str]] = OMIT,
        configuration_endpoint: typing.Optional[CreateAgentRequestConfigurationEndpoint] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostAgentsResponse:
        """
        Creates a new agent in a project.

        Parameters
        ----------
        name : str
            The name of the agent. Can only contain lowercase letters, numbers and hyphens. Must be unique within the project.

        project : typing.Optional[str]
            The name of the project to create the agent in.

        phone_number : typing.Optional[typing.Literal["assign-automatically"]]

        timezone : typing.Optional[str]
            The timezone of the agent. Used to format system variables like `{{system_time}}`.

        voice_id : typing.Optional[str]
            The voice ID to use.

        audio_format : typing.Optional[CreateAgentRequestAudioFormat]
            The audio format of the agent.

        audio_speed : typing.Optional[float]
            The audio speed of the agent.

        welcome_message : typing.Optional[str]
            Message to play when the conversation starts. Can contain template variables like `{{customer_name}}`.

        system_prompt : typing.Optional[str]
            Instructions for the conversation. Can contain template variables like `{{subject}}`.

        template_variables : typing.Optional[typing.Dict[str, CreateAgentRequestTemplateVariablesValue]]
            Variables that can be used in the welcome message and the system prompt.

        tools : typing.Optional[typing.Sequence[CreateAgentRequestToolsItem]]
            Array of built-in or custom tool names to use.

        tasks : typing.Optional[typing.Sequence[Task]]
            Array of task objects with `name` and `description` fields.

        no_input_poke_sec : typing.Optional[int]
            Number of seconds of silence before sending a poke message. `null` disables the poke message.

        no_input_poke_text : typing.Optional[str]
            The message to send after the specified silence.

        no_input_end_conversation_sec : typing.Optional[int]
            Seconds of silence before ending the conversation.

        boosted_keywords : typing.Optional[typing.Sequence[str]]
            These words, or short phrases, will be more accurately recognized by the agent.

        configuration_endpoint : typing.Optional[CreateAgentRequestConfigurationEndpoint]
            When not `null`, at the beginning of the conversation the agent will make a POST request to this endpoint when to get configuration options.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostAgentsResponse
            Success response

        Examples
        --------
        from phonic import (
            CreateAgentRequestConfigurationEndpoint,
            CreateAgentRequestTemplateVariablesValue,
            Phonic,
        )

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_agents(
            name="support-agent",
            timezone="America/Los_Angeles",
            voice_id="sarah",
            audio_speed=1.0,
            welcome_message="Hi {{customer_name}}. How can I help you today?",
            system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables={
                "customer_name": CreateAgentRequestTemplateVariablesValue(),
                "subject": CreateAgentRequestTemplateVariablesValue(
                    default_value="Chess",
                ),
            },
            tools=[],
            no_input_poke_sec=30,
            no_input_poke_text="Are you still there?",
            boosted_keywords=["Load ID", "dispatch"],
            configuration_endpoint=CreateAgentRequestConfigurationEndpoint(
                url="https://api.example.com/config",
                headers={"Authorization": "Bearer token123"},
                timeout_ms=7000,
            ),
        )
        """
        _response = self._raw_client.post_agents(
            name=name,
            project=project,
            phone_number=phone_number,
            timezone=timezone,
            voice_id=voice_id,
            audio_format=audio_format,
            audio_speed=audio_speed,
            welcome_message=welcome_message,
            system_prompt=system_prompt,
            template_variables=template_variables,
            tools=tools,
            tasks=tasks,
            no_input_poke_sec=no_input_poke_sec,
            no_input_poke_text=no_input_poke_text,
            no_input_end_conversation_sec=no_input_end_conversation_sec,
            boosted_keywords=boosted_keywords,
            configuration_endpoint=configuration_endpoint,
            request_options=request_options,
        )
        return _response.data

    def put_agents_upsert(
        self,
        *,
        name: str,
        project: typing.Optional[str] = None,
        phone_number: typing.Optional[typing.Literal["assign-automatically"]] = OMIT,
        timezone: typing.Optional[str] = OMIT,
        voice_id: typing.Optional[str] = OMIT,
        audio_format: typing.Optional[CreateAgentRequestAudioFormat] = OMIT,
        audio_speed: typing.Optional[float] = OMIT,
        welcome_message: typing.Optional[str] = OMIT,
        system_prompt: typing.Optional[str] = OMIT,
        template_variables: typing.Optional[typing.Dict[str, CreateAgentRequestTemplateVariablesValue]] = OMIT,
        tools: typing.Optional[typing.Sequence[CreateAgentRequestToolsItem]] = OMIT,
        tasks: typing.Optional[typing.Sequence[Task]] = OMIT,
        no_input_poke_sec: typing.Optional[int] = OMIT,
        no_input_poke_text: typing.Optional[str] = OMIT,
        no_input_end_conversation_sec: typing.Optional[int] = OMIT,
        boosted_keywords: typing.Optional[typing.Sequence[str]] = OMIT,
        configuration_endpoint: typing.Optional[CreateAgentRequestConfigurationEndpoint] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PutAgentsUpsertResponse:
        """
        Upserts an agent by name. If an agent with the same name already exists, it will be updated. Otherwise, it will be created.

        Parameters
        ----------
        name : str
            The name of the agent. Can only contain lowercase letters, numbers and hyphens. Must be unique within the project.

        project : typing.Optional[str]
            The name of the project containing the agent.

        phone_number : typing.Optional[typing.Literal["assign-automatically"]]

        timezone : typing.Optional[str]
            The timezone of the agent. Used to format system variables like `{{system_time}}`.

        voice_id : typing.Optional[str]
            The voice ID to use.

        audio_format : typing.Optional[CreateAgentRequestAudioFormat]
            The audio format of the agent.

        audio_speed : typing.Optional[float]
            The audio speed of the agent.

        welcome_message : typing.Optional[str]
            Message to play when the conversation starts. Can contain template variables like `{{customer_name}}`.

        system_prompt : typing.Optional[str]
            Instructions for the conversation. Can contain template variables like `{{subject}}`.

        template_variables : typing.Optional[typing.Dict[str, CreateAgentRequestTemplateVariablesValue]]
            Variables that can be used in the welcome message and the system prompt.

        tools : typing.Optional[typing.Sequence[CreateAgentRequestToolsItem]]
            Array of built-in or custom tool names to use.

        tasks : typing.Optional[typing.Sequence[Task]]
            Array of task objects with `name` and `description` fields.

        no_input_poke_sec : typing.Optional[int]
            Number of seconds of silence before sending a poke message. `null` disables the poke message.

        no_input_poke_text : typing.Optional[str]
            The message to send after the specified silence.

        no_input_end_conversation_sec : typing.Optional[int]
            Seconds of silence before ending the conversation.

        boosted_keywords : typing.Optional[typing.Sequence[str]]
            These words, or short phrases, will be more accurately recognized by the agent.

        configuration_endpoint : typing.Optional[CreateAgentRequestConfigurationEndpoint]
            When not `null`, at the beginning of the conversation the agent will make a POST request to this endpoint when to get configuration options.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PutAgentsUpsertResponse
            Success response

        Examples
        --------
        from phonic import (
            CreateAgentRequestConfigurationEndpoint,
            CreateAgentRequestTemplateVariablesValue,
            Phonic,
        )

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.put_agents_upsert(
            name="support-agent",
            phone_number="assign-automatically",
            timezone="America/Los_Angeles",
            voice_id="sarah",
            audio_speed=1.0,
            welcome_message="Hi {{customer_name}}. How can I help you today?",
            system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables={
                "customer_name": CreateAgentRequestTemplateVariablesValue(),
                "subject": CreateAgentRequestTemplateVariablesValue(
                    default_value="Chess",
                ),
            },
            tools=[],
            no_input_poke_sec=30,
            no_input_poke_text="Are you still there?",
            boosted_keywords=["Load ID", "dispatch"],
            configuration_endpoint=CreateAgentRequestConfigurationEndpoint(
                url="https://api.example.com/config",
                headers={"Authorization": "Bearer token123"},
                timeout_ms=7000,
            ),
        )
        """
        _response = self._raw_client.put_agents_upsert(
            name=name,
            project=project,
            phone_number=phone_number,
            timezone=timezone,
            voice_id=voice_id,
            audio_format=audio_format,
            audio_speed=audio_speed,
            welcome_message=welcome_message,
            system_prompt=system_prompt,
            template_variables=template_variables,
            tools=tools,
            tasks=tasks,
            no_input_poke_sec=no_input_poke_sec,
            no_input_poke_text=no_input_poke_text,
            no_input_end_conversation_sec=no_input_end_conversation_sec,
            boosted_keywords=boosted_keywords,
            configuration_endpoint=configuration_endpoint,
            request_options=request_options,
        )
        return _response.data

    def get_agents_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentsNameOrIdResponse:
        """
        Returns an agent by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the agent to get.

        project : typing.Optional[str]
            The name of the project containing the agent. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_agents_name_or_id(
            name_or_id="nameOrId",
        )
        """
        _response = self._raw_client.get_agents_name_or_id(name_or_id, project=project, request_options=request_options)
        return _response.data

    def delete_agents_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteAgentsNameOrIdResponse:
        """
        Deletes an agent by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the agent to delete.

        project : typing.Optional[str]
            The name of the project containing the agent. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAgentsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.delete_agents_name_or_id(
            name_or_id="nameOrId",
        )
        """
        _response = self._raw_client.delete_agents_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    def patch_agents_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[typing.Literal["assign-automatically"]] = OMIT,
        timezone: typing.Optional[str] = OMIT,
        voice_id: typing.Optional[str] = OMIT,
        audio_format: typing.Optional[UpdateAgentRequestAudioFormat] = OMIT,
        audio_speed: typing.Optional[float] = OMIT,
        welcome_message: typing.Optional[str] = OMIT,
        system_prompt: typing.Optional[str] = OMIT,
        template_variables: typing.Optional[typing.Dict[str, UpdateAgentRequestTemplateVariablesValue]] = OMIT,
        tools: typing.Optional[typing.Sequence[UpdateAgentRequestToolsItem]] = OMIT,
        tasks: typing.Optional[typing.Sequence[Task]] = OMIT,
        no_input_poke_sec: typing.Optional[int] = OMIT,
        no_input_poke_text: typing.Optional[str] = OMIT,
        no_input_end_conversation_sec: typing.Optional[int] = OMIT,
        boosted_keywords: typing.Optional[typing.Sequence[str]] = OMIT,
        configuration_endpoint: typing.Optional[UpdateAgentRequestConfigurationEndpoint] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchAgentsNameOrIdResponse:
        """
        Updates an agent by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the agent to update.

        project : typing.Optional[str]
            The name of the project containing the agent. Only used when `nameOrId` is a name.

        name : typing.Optional[str]
            The name of the agent. Can only contain lowercase letters, numbers and hyphens. Must be unique within the project.

        phone_number : typing.Optional[typing.Literal["assign-automatically"]]

        timezone : typing.Optional[str]
            The timezone of the agent. Used to format system variables like `{{system_time}}`.

        voice_id : typing.Optional[str]
            The voice ID to use.

        audio_format : typing.Optional[UpdateAgentRequestAudioFormat]
            The audio format of the agent.

        audio_speed : typing.Optional[float]
            The audio speed of the agent.

        welcome_message : typing.Optional[str]
            Message to play when the conversation starts. Can contain template variables like `{{customer_name}}`.

        system_prompt : typing.Optional[str]
            Instructions for the conversation. Can contain template variables like `{{subject}}`.

        template_variables : typing.Optional[typing.Dict[str, UpdateAgentRequestTemplateVariablesValue]]
            Variables that can be used in the welcome message and the system prompt.

        tools : typing.Optional[typing.Sequence[UpdateAgentRequestToolsItem]]
            Array of built-in or custom tool names to use.

        tasks : typing.Optional[typing.Sequence[Task]]
            Array of task objects with `name` and `description` fields.

        no_input_poke_sec : typing.Optional[int]
            Number of seconds of silence before sending a poke message. `null` disables the poke message.

        no_input_poke_text : typing.Optional[str]
            The message to send after the specified silence.

        no_input_end_conversation_sec : typing.Optional[int]
            Seconds of silence before ending the conversation.

        boosted_keywords : typing.Optional[typing.Sequence[str]]
            These words, or short phrases, will be more accurately recognized by the agent.

        configuration_endpoint : typing.Optional[UpdateAgentRequestConfigurationEndpoint]
            When not `null`, at the beginning of the conversation the agent will make a POST request to this endpoint when to get configuration options.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchAgentsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import (
            Phonic,
            UpdateAgentRequestConfigurationEndpoint,
            UpdateAgentRequestTemplateVariablesValue,
        )

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.patch_agents_name_or_id(
            name_or_id="nameOrId",
            name="updated-support-agent",
            phone_number="assign-automatically",
            timezone="America/Los_Angeles",
            voice_id="sarah",
            audio_speed=1.0,
            welcome_message="Hi {{customer_name}}. How can I help you today?",
            system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables={
                "customer_name": UpdateAgentRequestTemplateVariablesValue(),
                "subject": UpdateAgentRequestTemplateVariablesValue(
                    default_value="Chess",
                ),
            },
            tools=[],
            no_input_poke_sec=30,
            no_input_poke_text="Are you still there?",
            boosted_keywords=["Load ID", "dispatch"],
            configuration_endpoint=UpdateAgentRequestConfigurationEndpoint(
                url="https://api.example.com/config",
                headers={"Authorization": "Bearer token123"},
                timeout_ms=7000,
            ),
        )
        """
        _response = self._raw_client.patch_agents_name_or_id(
            name_or_id,
            project=project,
            name=name,
            phone_number=phone_number,
            timezone=timezone,
            voice_id=voice_id,
            audio_format=audio_format,
            audio_speed=audio_speed,
            welcome_message=welcome_message,
            system_prompt=system_prompt,
            template_variables=template_variables,
            tools=tools,
            tasks=tasks,
            no_input_poke_sec=no_input_poke_sec,
            no_input_poke_text=no_input_poke_text,
            no_input_end_conversation_sec=no_input_end_conversation_sec,
            boosted_keywords=boosted_keywords,
            configuration_endpoint=configuration_endpoint,
            request_options=request_options,
        )
        return _response.data

    def get_tools(
        self, *, project: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> GetToolsResponse:
        """
        Returns all custom tools for the organization.

        Parameters
        ----------
        project : typing.Optional[str]
            The name of the project to list tools for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetToolsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_tools()
        """
        _response = self._raw_client.get_tools(project=project, request_options=request_options)
        return _response.data

    def post_tools(
        self,
        *,
        name: str,
        description: str,
        type: CreateToolRequestType,
        execution_mode: CreateToolRequestExecutionMode,
        project: typing.Optional[str] = None,
        parameters: typing.Optional[typing.Sequence[ToolParameter]] = OMIT,
        endpoint_method: typing.Optional[typing.Literal["POST"]] = OMIT,
        endpoint_url: typing.Optional[str] = OMIT,
        endpoint_headers: typing.Optional[typing.Dict[str, str]] = OMIT,
        endpoint_timeout_ms: typing.Optional[int] = OMIT,
        tool_call_output_timeout_ms: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostToolsResponse:
        """
        Creates a new tool in a project.

        Parameters
        ----------
        name : str
            The name of the tool. Must be snake_case and unique within the organization.

        description : str
            A description of what the tool does.

        type : CreateToolRequestType
            The type of tool.

        execution_mode : CreateToolRequestExecutionMode
            Mode of operation.

        project : typing.Optional[str]
            The name of the project to create the tool in.

        parameters : typing.Optional[typing.Sequence[ToolParameter]]
            Array of parameter definitions.

        endpoint_method : typing.Optional[typing.Literal["POST"]]
            Required for webhook tools.

        endpoint_url : typing.Optional[str]
            Required for webhook tools.

        endpoint_headers : typing.Optional[typing.Dict[str, str]]
            Optional headers for webhook tools.

        endpoint_timeout_ms : typing.Optional[int]
            Timeout for webhook tools.

        tool_call_output_timeout_ms : typing.Optional[int]
            Timeout for WebSocket tool responses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostToolsResponse
            Success response

        Examples
        --------
        from phonic import Phonic, ToolParameter

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_tools(
            name="book_appointment",
            description="Books an appointment in the calendar system",
            type="custom_webhook",
            execution_mode="sync",
            parameters=[
                ToolParameter(
                    type="string",
                    name="date",
                    description="The date for the appointment in YYYY-MM-DD format",
                    is_required=True,
                ),
                ToolParameter(
                    type="string",
                    name="time",
                    description="The time for the appointment in HH:MM format",
                    is_required=True,
                ),
            ],
            endpoint_method="POST",
            endpoint_url="https://api.example.com/book-appointment",
            endpoint_headers={
                "Authorization": "Bearer token123",
                "Content-Type": "application/json",
            },
            endpoint_timeout_ms=5000,
        )
        """
        _response = self._raw_client.post_tools(
            name=name,
            description=description,
            type=type,
            execution_mode=execution_mode,
            project=project,
            parameters=parameters,
            endpoint_method=endpoint_method,
            endpoint_url=endpoint_url,
            endpoint_headers=endpoint_headers,
            endpoint_timeout_ms=endpoint_timeout_ms,
            tool_call_output_timeout_ms=tool_call_output_timeout_ms,
            request_options=request_options,
        )
        return _response.data

    def get_tools_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetToolsNameOrIdResponse:
        """
        Returns a tool by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the tool to get.

        project : typing.Optional[str]
            The name of the project containing the tool. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetToolsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_tools_name_or_id(
            name_or_id="nameOrId",
        )
        """
        _response = self._raw_client.get_tools_name_or_id(name_or_id, project=project, request_options=request_options)
        return _response.data

    def delete_tools_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteToolsNameOrIdResponse:
        """
        Deletes a tool by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the tool to delete.

        project : typing.Optional[str]
            The name of the project containing the tool. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteToolsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.delete_tools_name_or_id(
            name_or_id="nameOrId",
        )
        """
        _response = self._raw_client.delete_tools_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    def patch_tools_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        type: typing.Optional[UpdateToolRequestType] = OMIT,
        execution_mode: typing.Optional[UpdateToolRequestExecutionMode] = OMIT,
        parameters: typing.Optional[typing.Sequence[ToolParameter]] = OMIT,
        endpoint_method: typing.Optional[typing.Literal["POST"]] = OMIT,
        endpoint_url: typing.Optional[str] = OMIT,
        endpoint_headers: typing.Optional[typing.Dict[str, str]] = OMIT,
        endpoint_timeout_ms: typing.Optional[int] = OMIT,
        tool_call_output_timeout_ms: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchToolsNameOrIdResponse:
        """
        Updates a tool by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the tool to update.

        project : typing.Optional[str]
            The name of the project containing the tool. Only used when `nameOrId` is a name.

        name : typing.Optional[str]
            The name of the tool. Must be snake_case and unique within the organization.

        description : typing.Optional[str]
            A description of what the tool does.

        type : typing.Optional[UpdateToolRequestType]
            The type of tool.

        execution_mode : typing.Optional[UpdateToolRequestExecutionMode]
            Mode of operation.

        parameters : typing.Optional[typing.Sequence[ToolParameter]]
            Array of parameter definitions.

        endpoint_method : typing.Optional[typing.Literal["POST"]]

        endpoint_url : typing.Optional[str]

        endpoint_headers : typing.Optional[typing.Dict[str, str]]

        endpoint_timeout_ms : typing.Optional[int]

        tool_call_output_timeout_ms : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchToolsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.patch_tools_name_or_id(
            name_or_id="nameOrId",
            description="Updated description for booking appointments with enhanced features",
            endpoint_headers={"Authorization": "Bearer updated_token456"},
            endpoint_timeout_ms=7000,
        )
        """
        _response = self._raw_client.patch_tools_name_or_id(
            name_or_id,
            project=project,
            name=name,
            description=description,
            type=type,
            execution_mode=execution_mode,
            parameters=parameters,
            endpoint_method=endpoint_method,
            endpoint_url=endpoint_url,
            endpoint_headers=endpoint_headers,
            endpoint_timeout_ms=endpoint_timeout_ms,
            tool_call_output_timeout_ms=tool_call_output_timeout_ms,
            request_options=request_options,
        )
        return _response.data

    def get_extraction_schemas(
        self, *, project: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> GetExtractionSchemasResponse:
        """
        Returns all extraction schemas in a project.

        Parameters
        ----------
        project : typing.Optional[str]
            The name of the project to list extraction schemas for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetExtractionSchemasResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_extraction_schemas()
        """
        _response = self._raw_client.get_extraction_schemas(project=project, request_options=request_options)
        return _response.data

    def post_extraction_schemas(
        self,
        *,
        name: str,
        prompt: str,
        fields: typing.Sequence[ExtractionField],
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostExtractionSchemasResponse:
        """
        Creates a new extraction schema in a project.

        Parameters
        ----------
        name : str
            A name for the extraction schema.

        prompt : str
            Instructions for how to extract data from conversations.

        fields : typing.Sequence[ExtractionField]
            Array of field definitions.

        project : typing.Optional[str]
            The name of the project to create the extraction schema in.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostExtractionSchemasResponse
            Success response

        Examples
        --------
        from phonic import ExtractionField, Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_extraction_schemas(
            name="Appointment details",
            prompt="Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
            fields=[
                ExtractionField(
                    name="Date",
                    type="string",
                    description="The date of the appointment",
                ),
                ExtractionField(
                    name="Copay",
                    type="string",
                    description="Amount of money the patient pays for the appointment",
                ),
                ExtractionField(
                    name="Confirmed as booked",
                    type="bool",
                    description="Is the appointment confirmed as booked?",
                ),
            ],
        )
        """
        _response = self._raw_client.post_extraction_schemas(
            name=name, prompt=prompt, fields=fields, project=project, request_options=request_options
        )
        return _response.data

    def get_extraction_schemas_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetExtractionSchemasNameOrIdResponse:
        """
        Returns an extraction schema by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the extraction schema to get.

        project : typing.Optional[str]
            The name of the project containing the extraction schema. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetExtractionSchemasNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_extraction_schemas_name_or_id(
            name_or_id="nameOrId",
        )
        """
        _response = self._raw_client.get_extraction_schemas_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    def delete_extraction_schemas_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteExtractionSchemasNameOrIdResponse:
        """
        Deletes an extraction schema by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the extraction schema to delete.

        project : typing.Optional[str]
            The name of the project containing the extraction schema. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteExtractionSchemasNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.delete_extraction_schemas_name_or_id(
            name_or_id="nameOrId",
        )
        """
        _response = self._raw_client.delete_extraction_schemas_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    def patch_extraction_schemas_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        fields: typing.Optional[typing.Sequence[ExtractionField]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchExtractionSchemasNameOrIdResponse:
        """
        Updates an extraction schema by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the extraction schema to update.

        project : typing.Optional[str]
            The name of the project containing the extraction schema. Only used when `nameOrId` is a name.

        name : typing.Optional[str]
            A name for the extraction schema.

        prompt : typing.Optional[str]
            Instructions for how to extract data from conversations.

        fields : typing.Optional[typing.Sequence[ExtractionField]]
            Array of field definitions.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchExtractionSchemasNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import ExtractionField, Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.patch_extraction_schemas_name_or_id(
            name_or_id="nameOrId",
            name="Updated appointment details",
            prompt="Updated extraction instructions. Dates should be in `9 Apr 2025` format.",
            fields=[
                ExtractionField(
                    name="Date",
                    type="string",
                    description="The date of the appointment",
                ),
                ExtractionField(
                    name="Time",
                    type="string",
                    description="The time of the appointment",
                ),
            ],
        )
        """
        _response = self._raw_client.patch_extraction_schemas_name_or_id(
            name_or_id, project=project, name=name, prompt=prompt, fields=fields, request_options=request_options
        )
        return _response.data

    def get_voices(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetVoicesResponse:
        """
        Returns all available voices for a model.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetVoicesResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_voices()
        """
        _response = self._raw_client.get_voices(request_options=request_options)
        return _response.data

    def get_voices_id(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> GetVoicesIdResponse:
        """
        Returns a voice by ID.

        Parameters
        ----------
        id : str
            The ID of the voice to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetVoicesIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_voices_id(
            id="id",
        )
        """
        _response = self._raw_client.get_voices_id(id, request_options=request_options)
        return _response.data

    def get_conversations(
        self,
        *,
        project: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        duration_min: typing.Optional[int] = None,
        duration_max: typing.Optional[int] = None,
        started_at_min: typing.Optional[str] = None,
        started_at_max: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationsResponse:
        """
        Returns conversations with optional filtering.

        Parameters
        ----------
        project : typing.Optional[str]
            The name of the project to list conversations for.

        external_id : typing.Optional[str]
            Filter by external ID to get a specific conversation.

        duration_min : typing.Optional[int]
            Minimum duration in seconds.

        duration_max : typing.Optional[int]
            Maximum duration in seconds.

        started_at_min : typing.Optional[str]
            Minimum start date/time. Valid examples: `2025-04-17`, `2025-04-17T02:48:52.708Z`

        started_at_max : typing.Optional[str]
            Maximum start date/time. Valid examples: `2025-04-17`, `2025-04-17T02:48:52.708Z`

        before : typing.Optional[str]
            Cursor for pagination (before).

        after : typing.Optional[str]
            Cursor for pagination (after).

        limit : typing.Optional[int]
            Maximum number of conversations to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_conversations()
        """
        _response = self._raw_client.get_conversations(
            project=project,
            external_id=external_id,
            duration_min=duration_min,
            duration_max=duration_max,
            started_at_min=started_at_min,
            started_at_max=started_at_max,
            before=before,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def get_conversations_id(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationsIdResponse:
        """
        Returns a conversation by ID.

        Parameters
        ----------
        id : str
            The ID of the conversation to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_conversations_id(
            id="id",
        )
        """
        _response = self._raw_client.get_conversations_id(id, request_options=request_options)
        return _response.data

    def post_conversations_id_cancel(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PostConversationsIdCancelResponse:
        """
        Cancels an active conversation.

        Parameters
        ----------
        id : str
            The ID of the conversation to cancel.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostConversationsIdCancelResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_conversations_id_cancel(
            id="id",
        )
        """
        _response = self._raw_client.post_conversations_id_cancel(id, request_options=request_options)
        return _response.data

    def get_conversations_id_analysis(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationsIdAnalysisResponse:
        """
        Returns an analysis of the specified conversation.

        Parameters
        ----------
        id : str
            The ID of the conversation to analyze.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsIdAnalysisResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_conversations_id_analysis(
            id="id",
        )
        """
        _response = self._raw_client.get_conversations_id_analysis(id, request_options=request_options)
        return _response.data

    def get_conversations_id_extractions(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationsIdExtractionsResponse:
        """
        Returns all extractions for a conversation.

        Parameters
        ----------
        id : str
            The ID of the conversation to get extractions for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsIdExtractionsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_conversations_id_extractions(
            id="id",
        )
        """
        _response = self._raw_client.get_conversations_id_extractions(id, request_options=request_options)
        return _response.data

    def post_conversations_id_extractions(
        self, id: str, *, schema_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostConversationsIdExtractionsResponse:
        """
        Extracts data from a conversation using a schema.

        Parameters
        ----------
        id : str
            The ID of the conversation to extract data from.

        schema_id : str
            ID of the extraction schema to use.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostConversationsIdExtractionsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_conversations_id_extractions(
            id="id",
            schema_id="conv_extract_schema_6458e4ac-533c-4bdf-8e6d-c2f06f87fd5c",
        )
        """
        _response = self._raw_client.post_conversations_id_extractions(
            id, schema_id=schema_id, request_options=request_options
        )
        return _response.data

    def get_conversations_id_evals(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationsIdEvalsResponse:
        """
        Returns all evaluations for a conversation.

        Parameters
        ----------
        id : str
            The ID of the conversation to get evaluations for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsIdEvalsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_conversations_id_evals(
            id="id",
        )
        """
        _response = self._raw_client.get_conversations_id_evals(id, request_options=request_options)
        return _response.data

    def post_conversations_id_evals(
        self, id: str, *, prompt_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ConversationEvaluationResult:
        """
        Evaluates a conversation using an evaluation prompt.

        Parameters
        ----------
        id : str
            The ID of the conversation to evaluate.

        prompt_id : str
            ID of the evaluation prompt to use.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationEvaluationResult
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_conversations_id_evals(
            id="id",
            prompt_id="conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
        )
        """
        _response = self._raw_client.post_conversations_id_evals(
            id, prompt_id=prompt_id, request_options=request_options
        )
        return _response.data

    def post_conversations_outbound_call(
        self,
        *,
        to_phone_number: str,
        config: typing.Optional[OutboundCallConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostConversationsOutboundCallResponse:
        """
        Initiates a call to a given phone number using Phonic's Twilio account.

        Parameters
        ----------
        to_phone_number : str
            The phone number to call in E.164 format.

        config : typing.Optional[OutboundCallConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostConversationsOutboundCallResponse
            Success response

        Examples
        --------
        from phonic import OutboundCallConfig, Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_conversations_outbound_call(
            to_phone_number="+19189397081",
            config=OutboundCallConfig(
                agent="support-agent",
                welcome_message="Hi {{customer_name}}. How can I help you today?",
                system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables={"customer_name": "David", "subject": "Chess"},
                voice_id="sarah",
                no_input_poke_sec=30,
                no_input_poke_text="Are you still there?",
                no_input_end_conversation_sec=180,
                boosted_keywords=["Load ID", "dispatch"],
                tools=[],
            ),
        )
        """
        _response = self._raw_client.post_conversations_outbound_call(
            to_phone_number=to_phone_number, config=config, request_options=request_options
        )
        return _response.data

    def post_conversations_sip_outbound_call(
        self,
        *,
        sip_address: str,
        from_phone_number: str,
        to_phone_number: str,
        token: typing.Optional[str] = None,
        downstream_websocket_url: typing.Optional[str] = None,
        sip_auth_username: typing.Optional[str] = None,
        sip_auth_password: typing.Optional[str] = None,
        config: typing.Optional[OutboundCallConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostConversationsSipOutboundCallResponse:
        """
        Initiates a SIP outbound call using user-supplied SIP credentials in headers.

        Parameters
        ----------
        sip_address : str
            SIP address of the user's SIP trunk. Required.

        from_phone_number : str
            Caller ID phone number in E.164 format.

        to_phone_number : str
            Destination phone number in E.164 format.

        token : typing.Optional[str]
            Optional session token used for STS authorization.

        downstream_websocket_url : typing.Optional[str]
            Optional downstream STS WebSocket URL to override the default.

        sip_auth_username : typing.Optional[str]
            SIP auth username, if your provider requires it.

        sip_auth_password : typing.Optional[str]
            SIP auth password, if your provider requires it.

        config : typing.Optional[OutboundCallConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostConversationsSipOutboundCallResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_conversations_sip_outbound_call(
            sip_address="X-Sip-Address",
            from_phone_number="from_phone_number",
            to_phone_number="to_phone_number",
        )
        """
        _response = self._raw_client.post_conversations_sip_outbound_call(
            sip_address=sip_address,
            from_phone_number=from_phone_number,
            to_phone_number=to_phone_number,
            token=token,
            downstream_websocket_url=downstream_websocket_url,
            sip_auth_username=sip_auth_username,
            sip_auth_password=sip_auth_password,
            config=config,
            request_options=request_options,
        )
        return _response.data

    def get_projects(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetProjectsResponse:
        """
        Returns all projects in a workspace.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetProjectsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_projects()
        """
        _response = self._raw_client.get_projects(request_options=request_options)
        return _response.data

    def post_projects(
        self, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostProjectsResponse:
        """
        Creates a new project in a workspace.

        Parameters
        ----------
        name : str
            The name of the project. Can only contain lowercase letters, numbers and hyphens. Must be unique within the workspace.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostProjectsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_projects(
            name="customer-support",
        )
        """
        _response = self._raw_client.post_projects(name=name, request_options=request_options)
        return _response.data

    def get_projects_name_or_id(
        self, name_or_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetProjectsNameOrIdResponse:
        """
        Returns a project by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the project to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetProjectsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_projects_name_or_id(
            name_or_id="nameOrId",
        )
        """
        _response = self._raw_client.get_projects_name_or_id(name_or_id, request_options=request_options)
        return _response.data

    def delete_projects_name_or_id(
        self, name_or_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteProjectsNameOrIdResponse:
        """
        Deletes a project by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the project to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteProjectsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.delete_projects_name_or_id(
            name_or_id="nameOrId",
        )
        """
        _response = self._raw_client.delete_projects_name_or_id(name_or_id, request_options=request_options)
        return _response.data

    def patch_projects_name_or_id(
        self,
        name_or_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        default_agent: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchProjectsNameOrIdResponse:
        """
        Updates a project by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the project to update.

        name : typing.Optional[str]
            The name of the project. Can only contain lowercase letters, numbers and hyphens. Must be unique within the workspace.

        default_agent : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchProjectsNameOrIdResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.patch_projects_name_or_id(
            name_or_id="nameOrId",
            name="updated-customer-support",
            default_agent="another-agent",
        )
        """
        _response = self._raw_client.patch_projects_name_or_id(
            name_or_id, name=name, default_agent=default_agent, request_options=request_options
        )
        return _response.data

    def get_projects_id_conversation_eval_prompts(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetProjectsIdConversationEvalPromptsResponse:
        """
        Returns all conversation evaluation prompts for a project.

        Parameters
        ----------
        id : str
            The ID of the project.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetProjectsIdConversationEvalPromptsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.get_projects_id_conversation_eval_prompts(
            id="id",
        )
        """
        _response = self._raw_client.get_projects_id_conversation_eval_prompts(id, request_options=request_options)
        return _response.data

    def post_projects_id_conversation_eval_prompts(
        self, id: str, *, name: str, prompt: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostProjectsIdConversationEvalPromptsResponse:
        """
        Creates a new conversation evaluation prompt for a project.

        Parameters
        ----------
        id : str
            The ID of the project.

        name : str
            A useful name for referring to this prompt.

        prompt : str
            Actual evaluation prompt text to evaluate conversations with.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostProjectsIdConversationEvalPromptsResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            api_key="YOUR_API_KEY",
        )
        client.post_projects_id_conversation_eval_prompts(
            id="id",
            name="test_prompt",
            prompt="The assistant used the word chocolate in the conversation",
        )
        """
        _response = self._raw_client.post_projects_id_conversation_eval_prompts(
            id, name=name, prompt=prompt, request_options=request_options
        )
        return _response.data


class AsyncPhonic:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    environment : PhonicEnvironment
        The environment to use for requests from the client. from .environment import PhonicEnvironment



        Defaults to PhonicEnvironment.DEFAULT



    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from phonic import AsyncPhonic

    client = AsyncPhonic(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        environment: PhonicEnvironment = PhonicEnvironment.DEFAULT,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("PHONIC_API_KEY"),
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        if api_key is None:
            raise ApiError(
                body="The client must be instantiated be either passing in api_key or setting PHONIC_API_KEY"
            )
        self._client_wrapper = AsyncClientWrapper(
            environment=environment,
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawPhonic(client_wrapper=self._client_wrapper)
        self.conversations = AsyncConversationsClient(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPhonic:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPhonic
        """
        return self._raw_client

    async def get_agents(
        self, *, project: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> GetAgentsResponse:
        """
        Returns all agents in a project.

        Parameters
        ----------
        project : typing.Optional[str]
            The name of the project to list agents for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_agents()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_agents(project=project, request_options=request_options)
        return _response.data

    async def post_agents(
        self,
        *,
        name: str,
        project: typing.Optional[str] = None,
        phone_number: typing.Optional[typing.Literal["assign-automatically"]] = OMIT,
        timezone: typing.Optional[str] = OMIT,
        voice_id: typing.Optional[str] = OMIT,
        audio_format: typing.Optional[CreateAgentRequestAudioFormat] = OMIT,
        audio_speed: typing.Optional[float] = OMIT,
        welcome_message: typing.Optional[str] = OMIT,
        system_prompt: typing.Optional[str] = OMIT,
        template_variables: typing.Optional[typing.Dict[str, CreateAgentRequestTemplateVariablesValue]] = OMIT,
        tools: typing.Optional[typing.Sequence[CreateAgentRequestToolsItem]] = OMIT,
        tasks: typing.Optional[typing.Sequence[Task]] = OMIT,
        no_input_poke_sec: typing.Optional[int] = OMIT,
        no_input_poke_text: typing.Optional[str] = OMIT,
        no_input_end_conversation_sec: typing.Optional[int] = OMIT,
        boosted_keywords: typing.Optional[typing.Sequence[str]] = OMIT,
        configuration_endpoint: typing.Optional[CreateAgentRequestConfigurationEndpoint] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostAgentsResponse:
        """
        Creates a new agent in a project.

        Parameters
        ----------
        name : str
            The name of the agent. Can only contain lowercase letters, numbers and hyphens. Must be unique within the project.

        project : typing.Optional[str]
            The name of the project to create the agent in.

        phone_number : typing.Optional[typing.Literal["assign-automatically"]]

        timezone : typing.Optional[str]
            The timezone of the agent. Used to format system variables like `{{system_time}}`.

        voice_id : typing.Optional[str]
            The voice ID to use.

        audio_format : typing.Optional[CreateAgentRequestAudioFormat]
            The audio format of the agent.

        audio_speed : typing.Optional[float]
            The audio speed of the agent.

        welcome_message : typing.Optional[str]
            Message to play when the conversation starts. Can contain template variables like `{{customer_name}}`.

        system_prompt : typing.Optional[str]
            Instructions for the conversation. Can contain template variables like `{{subject}}`.

        template_variables : typing.Optional[typing.Dict[str, CreateAgentRequestTemplateVariablesValue]]
            Variables that can be used in the welcome message and the system prompt.

        tools : typing.Optional[typing.Sequence[CreateAgentRequestToolsItem]]
            Array of built-in or custom tool names to use.

        tasks : typing.Optional[typing.Sequence[Task]]
            Array of task objects with `name` and `description` fields.

        no_input_poke_sec : typing.Optional[int]
            Number of seconds of silence before sending a poke message. `null` disables the poke message.

        no_input_poke_text : typing.Optional[str]
            The message to send after the specified silence.

        no_input_end_conversation_sec : typing.Optional[int]
            Seconds of silence before ending the conversation.

        boosted_keywords : typing.Optional[typing.Sequence[str]]
            These words, or short phrases, will be more accurately recognized by the agent.

        configuration_endpoint : typing.Optional[CreateAgentRequestConfigurationEndpoint]
            When not `null`, at the beginning of the conversation the agent will make a POST request to this endpoint when to get configuration options.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostAgentsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import (
            AsyncPhonic,
            CreateAgentRequestConfigurationEndpoint,
            CreateAgentRequestTemplateVariablesValue,
        )

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_agents(
                name="support-agent",
                timezone="America/Los_Angeles",
                voice_id="sarah",
                audio_speed=1.0,
                welcome_message="Hi {{customer_name}}. How can I help you today?",
                system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables={
                    "customer_name": CreateAgentRequestTemplateVariablesValue(),
                    "subject": CreateAgentRequestTemplateVariablesValue(
                        default_value="Chess",
                    ),
                },
                tools=[],
                no_input_poke_sec=30,
                no_input_poke_text="Are you still there?",
                boosted_keywords=["Load ID", "dispatch"],
                configuration_endpoint=CreateAgentRequestConfigurationEndpoint(
                    url="https://api.example.com/config",
                    headers={"Authorization": "Bearer token123"},
                    timeout_ms=7000,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_agents(
            name=name,
            project=project,
            phone_number=phone_number,
            timezone=timezone,
            voice_id=voice_id,
            audio_format=audio_format,
            audio_speed=audio_speed,
            welcome_message=welcome_message,
            system_prompt=system_prompt,
            template_variables=template_variables,
            tools=tools,
            tasks=tasks,
            no_input_poke_sec=no_input_poke_sec,
            no_input_poke_text=no_input_poke_text,
            no_input_end_conversation_sec=no_input_end_conversation_sec,
            boosted_keywords=boosted_keywords,
            configuration_endpoint=configuration_endpoint,
            request_options=request_options,
        )
        return _response.data

    async def put_agents_upsert(
        self,
        *,
        name: str,
        project: typing.Optional[str] = None,
        phone_number: typing.Optional[typing.Literal["assign-automatically"]] = OMIT,
        timezone: typing.Optional[str] = OMIT,
        voice_id: typing.Optional[str] = OMIT,
        audio_format: typing.Optional[CreateAgentRequestAudioFormat] = OMIT,
        audio_speed: typing.Optional[float] = OMIT,
        welcome_message: typing.Optional[str] = OMIT,
        system_prompt: typing.Optional[str] = OMIT,
        template_variables: typing.Optional[typing.Dict[str, CreateAgentRequestTemplateVariablesValue]] = OMIT,
        tools: typing.Optional[typing.Sequence[CreateAgentRequestToolsItem]] = OMIT,
        tasks: typing.Optional[typing.Sequence[Task]] = OMIT,
        no_input_poke_sec: typing.Optional[int] = OMIT,
        no_input_poke_text: typing.Optional[str] = OMIT,
        no_input_end_conversation_sec: typing.Optional[int] = OMIT,
        boosted_keywords: typing.Optional[typing.Sequence[str]] = OMIT,
        configuration_endpoint: typing.Optional[CreateAgentRequestConfigurationEndpoint] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PutAgentsUpsertResponse:
        """
        Upserts an agent by name. If an agent with the same name already exists, it will be updated. Otherwise, it will be created.

        Parameters
        ----------
        name : str
            The name of the agent. Can only contain lowercase letters, numbers and hyphens. Must be unique within the project.

        project : typing.Optional[str]
            The name of the project containing the agent.

        phone_number : typing.Optional[typing.Literal["assign-automatically"]]

        timezone : typing.Optional[str]
            The timezone of the agent. Used to format system variables like `{{system_time}}`.

        voice_id : typing.Optional[str]
            The voice ID to use.

        audio_format : typing.Optional[CreateAgentRequestAudioFormat]
            The audio format of the agent.

        audio_speed : typing.Optional[float]
            The audio speed of the agent.

        welcome_message : typing.Optional[str]
            Message to play when the conversation starts. Can contain template variables like `{{customer_name}}`.

        system_prompt : typing.Optional[str]
            Instructions for the conversation. Can contain template variables like `{{subject}}`.

        template_variables : typing.Optional[typing.Dict[str, CreateAgentRequestTemplateVariablesValue]]
            Variables that can be used in the welcome message and the system prompt.

        tools : typing.Optional[typing.Sequence[CreateAgentRequestToolsItem]]
            Array of built-in or custom tool names to use.

        tasks : typing.Optional[typing.Sequence[Task]]
            Array of task objects with `name` and `description` fields.

        no_input_poke_sec : typing.Optional[int]
            Number of seconds of silence before sending a poke message. `null` disables the poke message.

        no_input_poke_text : typing.Optional[str]
            The message to send after the specified silence.

        no_input_end_conversation_sec : typing.Optional[int]
            Seconds of silence before ending the conversation.

        boosted_keywords : typing.Optional[typing.Sequence[str]]
            These words, or short phrases, will be more accurately recognized by the agent.

        configuration_endpoint : typing.Optional[CreateAgentRequestConfigurationEndpoint]
            When not `null`, at the beginning of the conversation the agent will make a POST request to this endpoint when to get configuration options.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PutAgentsUpsertResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import (
            AsyncPhonic,
            CreateAgentRequestConfigurationEndpoint,
            CreateAgentRequestTemplateVariablesValue,
        )

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.put_agents_upsert(
                name="support-agent",
                phone_number="assign-automatically",
                timezone="America/Los_Angeles",
                voice_id="sarah",
                audio_speed=1.0,
                welcome_message="Hi {{customer_name}}. How can I help you today?",
                system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables={
                    "customer_name": CreateAgentRequestTemplateVariablesValue(),
                    "subject": CreateAgentRequestTemplateVariablesValue(
                        default_value="Chess",
                    ),
                },
                tools=[],
                no_input_poke_sec=30,
                no_input_poke_text="Are you still there?",
                boosted_keywords=["Load ID", "dispatch"],
                configuration_endpoint=CreateAgentRequestConfigurationEndpoint(
                    url="https://api.example.com/config",
                    headers={"Authorization": "Bearer token123"},
                    timeout_ms=7000,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.put_agents_upsert(
            name=name,
            project=project,
            phone_number=phone_number,
            timezone=timezone,
            voice_id=voice_id,
            audio_format=audio_format,
            audio_speed=audio_speed,
            welcome_message=welcome_message,
            system_prompt=system_prompt,
            template_variables=template_variables,
            tools=tools,
            tasks=tasks,
            no_input_poke_sec=no_input_poke_sec,
            no_input_poke_text=no_input_poke_text,
            no_input_end_conversation_sec=no_input_end_conversation_sec,
            boosted_keywords=boosted_keywords,
            configuration_endpoint=configuration_endpoint,
            request_options=request_options,
        )
        return _response.data

    async def get_agents_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetAgentsNameOrIdResponse:
        """
        Returns an agent by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the agent to get.

        project : typing.Optional[str]
            The name of the project containing the agent. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetAgentsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_agents_name_or_id(
                name_or_id="nameOrId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_agents_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    async def delete_agents_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteAgentsNameOrIdResponse:
        """
        Deletes an agent by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the agent to delete.

        project : typing.Optional[str]
            The name of the project containing the agent. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteAgentsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_agents_name_or_id(
                name_or_id="nameOrId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_agents_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    async def patch_agents_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[typing.Literal["assign-automatically"]] = OMIT,
        timezone: typing.Optional[str] = OMIT,
        voice_id: typing.Optional[str] = OMIT,
        audio_format: typing.Optional[UpdateAgentRequestAudioFormat] = OMIT,
        audio_speed: typing.Optional[float] = OMIT,
        welcome_message: typing.Optional[str] = OMIT,
        system_prompt: typing.Optional[str] = OMIT,
        template_variables: typing.Optional[typing.Dict[str, UpdateAgentRequestTemplateVariablesValue]] = OMIT,
        tools: typing.Optional[typing.Sequence[UpdateAgentRequestToolsItem]] = OMIT,
        tasks: typing.Optional[typing.Sequence[Task]] = OMIT,
        no_input_poke_sec: typing.Optional[int] = OMIT,
        no_input_poke_text: typing.Optional[str] = OMIT,
        no_input_end_conversation_sec: typing.Optional[int] = OMIT,
        boosted_keywords: typing.Optional[typing.Sequence[str]] = OMIT,
        configuration_endpoint: typing.Optional[UpdateAgentRequestConfigurationEndpoint] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchAgentsNameOrIdResponse:
        """
        Updates an agent by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the agent to update.

        project : typing.Optional[str]
            The name of the project containing the agent. Only used when `nameOrId` is a name.

        name : typing.Optional[str]
            The name of the agent. Can only contain lowercase letters, numbers and hyphens. Must be unique within the project.

        phone_number : typing.Optional[typing.Literal["assign-automatically"]]

        timezone : typing.Optional[str]
            The timezone of the agent. Used to format system variables like `{{system_time}}`.

        voice_id : typing.Optional[str]
            The voice ID to use.

        audio_format : typing.Optional[UpdateAgentRequestAudioFormat]
            The audio format of the agent.

        audio_speed : typing.Optional[float]
            The audio speed of the agent.

        welcome_message : typing.Optional[str]
            Message to play when the conversation starts. Can contain template variables like `{{customer_name}}`.

        system_prompt : typing.Optional[str]
            Instructions for the conversation. Can contain template variables like `{{subject}}`.

        template_variables : typing.Optional[typing.Dict[str, UpdateAgentRequestTemplateVariablesValue]]
            Variables that can be used in the welcome message and the system prompt.

        tools : typing.Optional[typing.Sequence[UpdateAgentRequestToolsItem]]
            Array of built-in or custom tool names to use.

        tasks : typing.Optional[typing.Sequence[Task]]
            Array of task objects with `name` and `description` fields.

        no_input_poke_sec : typing.Optional[int]
            Number of seconds of silence before sending a poke message. `null` disables the poke message.

        no_input_poke_text : typing.Optional[str]
            The message to send after the specified silence.

        no_input_end_conversation_sec : typing.Optional[int]
            Seconds of silence before ending the conversation.

        boosted_keywords : typing.Optional[typing.Sequence[str]]
            These words, or short phrases, will be more accurately recognized by the agent.

        configuration_endpoint : typing.Optional[UpdateAgentRequestConfigurationEndpoint]
            When not `null`, at the beginning of the conversation the agent will make a POST request to this endpoint when to get configuration options.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchAgentsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import (
            AsyncPhonic,
            UpdateAgentRequestConfigurationEndpoint,
            UpdateAgentRequestTemplateVariablesValue,
        )

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.patch_agents_name_or_id(
                name_or_id="nameOrId",
                name="updated-support-agent",
                phone_number="assign-automatically",
                timezone="America/Los_Angeles",
                voice_id="sarah",
                audio_speed=1.0,
                welcome_message="Hi {{customer_name}}. How can I help you today?",
                system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables={
                    "customer_name": UpdateAgentRequestTemplateVariablesValue(),
                    "subject": UpdateAgentRequestTemplateVariablesValue(
                        default_value="Chess",
                    ),
                },
                tools=[],
                no_input_poke_sec=30,
                no_input_poke_text="Are you still there?",
                boosted_keywords=["Load ID", "dispatch"],
                configuration_endpoint=UpdateAgentRequestConfigurationEndpoint(
                    url="https://api.example.com/config",
                    headers={"Authorization": "Bearer token123"},
                    timeout_ms=7000,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch_agents_name_or_id(
            name_or_id,
            project=project,
            name=name,
            phone_number=phone_number,
            timezone=timezone,
            voice_id=voice_id,
            audio_format=audio_format,
            audio_speed=audio_speed,
            welcome_message=welcome_message,
            system_prompt=system_prompt,
            template_variables=template_variables,
            tools=tools,
            tasks=tasks,
            no_input_poke_sec=no_input_poke_sec,
            no_input_poke_text=no_input_poke_text,
            no_input_end_conversation_sec=no_input_end_conversation_sec,
            boosted_keywords=boosted_keywords,
            configuration_endpoint=configuration_endpoint,
            request_options=request_options,
        )
        return _response.data

    async def get_tools(
        self, *, project: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> GetToolsResponse:
        """
        Returns all custom tools for the organization.

        Parameters
        ----------
        project : typing.Optional[str]
            The name of the project to list tools for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetToolsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_tools()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_tools(project=project, request_options=request_options)
        return _response.data

    async def post_tools(
        self,
        *,
        name: str,
        description: str,
        type: CreateToolRequestType,
        execution_mode: CreateToolRequestExecutionMode,
        project: typing.Optional[str] = None,
        parameters: typing.Optional[typing.Sequence[ToolParameter]] = OMIT,
        endpoint_method: typing.Optional[typing.Literal["POST"]] = OMIT,
        endpoint_url: typing.Optional[str] = OMIT,
        endpoint_headers: typing.Optional[typing.Dict[str, str]] = OMIT,
        endpoint_timeout_ms: typing.Optional[int] = OMIT,
        tool_call_output_timeout_ms: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostToolsResponse:
        """
        Creates a new tool in a project.

        Parameters
        ----------
        name : str
            The name of the tool. Must be snake_case and unique within the organization.

        description : str
            A description of what the tool does.

        type : CreateToolRequestType
            The type of tool.

        execution_mode : CreateToolRequestExecutionMode
            Mode of operation.

        project : typing.Optional[str]
            The name of the project to create the tool in.

        parameters : typing.Optional[typing.Sequence[ToolParameter]]
            Array of parameter definitions.

        endpoint_method : typing.Optional[typing.Literal["POST"]]
            Required for webhook tools.

        endpoint_url : typing.Optional[str]
            Required for webhook tools.

        endpoint_headers : typing.Optional[typing.Dict[str, str]]
            Optional headers for webhook tools.

        endpoint_timeout_ms : typing.Optional[int]
            Timeout for webhook tools.

        tool_call_output_timeout_ms : typing.Optional[int]
            Timeout for WebSocket tool responses.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostToolsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic, ToolParameter

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_tools(
                name="book_appointment",
                description="Books an appointment in the calendar system",
                type="custom_webhook",
                execution_mode="sync",
                parameters=[
                    ToolParameter(
                        type="string",
                        name="date",
                        description="The date for the appointment in YYYY-MM-DD format",
                        is_required=True,
                    ),
                    ToolParameter(
                        type="string",
                        name="time",
                        description="The time for the appointment in HH:MM format",
                        is_required=True,
                    ),
                ],
                endpoint_method="POST",
                endpoint_url="https://api.example.com/book-appointment",
                endpoint_headers={
                    "Authorization": "Bearer token123",
                    "Content-Type": "application/json",
                },
                endpoint_timeout_ms=5000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_tools(
            name=name,
            description=description,
            type=type,
            execution_mode=execution_mode,
            project=project,
            parameters=parameters,
            endpoint_method=endpoint_method,
            endpoint_url=endpoint_url,
            endpoint_headers=endpoint_headers,
            endpoint_timeout_ms=endpoint_timeout_ms,
            tool_call_output_timeout_ms=tool_call_output_timeout_ms,
            request_options=request_options,
        )
        return _response.data

    async def get_tools_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetToolsNameOrIdResponse:
        """
        Returns a tool by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the tool to get.

        project : typing.Optional[str]
            The name of the project containing the tool. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetToolsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_tools_name_or_id(
                name_or_id="nameOrId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_tools_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    async def delete_tools_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteToolsNameOrIdResponse:
        """
        Deletes a tool by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the tool to delete.

        project : typing.Optional[str]
            The name of the project containing the tool. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteToolsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_tools_name_or_id(
                name_or_id="nameOrId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_tools_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    async def patch_tools_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        type: typing.Optional[UpdateToolRequestType] = OMIT,
        execution_mode: typing.Optional[UpdateToolRequestExecutionMode] = OMIT,
        parameters: typing.Optional[typing.Sequence[ToolParameter]] = OMIT,
        endpoint_method: typing.Optional[typing.Literal["POST"]] = OMIT,
        endpoint_url: typing.Optional[str] = OMIT,
        endpoint_headers: typing.Optional[typing.Dict[str, str]] = OMIT,
        endpoint_timeout_ms: typing.Optional[int] = OMIT,
        tool_call_output_timeout_ms: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchToolsNameOrIdResponse:
        """
        Updates a tool by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the tool to update.

        project : typing.Optional[str]
            The name of the project containing the tool. Only used when `nameOrId` is a name.

        name : typing.Optional[str]
            The name of the tool. Must be snake_case and unique within the organization.

        description : typing.Optional[str]
            A description of what the tool does.

        type : typing.Optional[UpdateToolRequestType]
            The type of tool.

        execution_mode : typing.Optional[UpdateToolRequestExecutionMode]
            Mode of operation.

        parameters : typing.Optional[typing.Sequence[ToolParameter]]
            Array of parameter definitions.

        endpoint_method : typing.Optional[typing.Literal["POST"]]

        endpoint_url : typing.Optional[str]

        endpoint_headers : typing.Optional[typing.Dict[str, str]]

        endpoint_timeout_ms : typing.Optional[int]

        tool_call_output_timeout_ms : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchToolsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.patch_tools_name_or_id(
                name_or_id="nameOrId",
                description="Updated description for booking appointments with enhanced features",
                endpoint_headers={"Authorization": "Bearer updated_token456"},
                endpoint_timeout_ms=7000,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch_tools_name_or_id(
            name_or_id,
            project=project,
            name=name,
            description=description,
            type=type,
            execution_mode=execution_mode,
            parameters=parameters,
            endpoint_method=endpoint_method,
            endpoint_url=endpoint_url,
            endpoint_headers=endpoint_headers,
            endpoint_timeout_ms=endpoint_timeout_ms,
            tool_call_output_timeout_ms=tool_call_output_timeout_ms,
            request_options=request_options,
        )
        return _response.data

    async def get_extraction_schemas(
        self, *, project: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> GetExtractionSchemasResponse:
        """
        Returns all extraction schemas in a project.

        Parameters
        ----------
        project : typing.Optional[str]
            The name of the project to list extraction schemas for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetExtractionSchemasResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_extraction_schemas()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_extraction_schemas(project=project, request_options=request_options)
        return _response.data

    async def post_extraction_schemas(
        self,
        *,
        name: str,
        prompt: str,
        fields: typing.Sequence[ExtractionField],
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostExtractionSchemasResponse:
        """
        Creates a new extraction schema in a project.

        Parameters
        ----------
        name : str
            A name for the extraction schema.

        prompt : str
            Instructions for how to extract data from conversations.

        fields : typing.Sequence[ExtractionField]
            Array of field definitions.

        project : typing.Optional[str]
            The name of the project to create the extraction schema in.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostExtractionSchemasResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic, ExtractionField

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_extraction_schemas(
                name="Appointment details",
                prompt="Dates should be in `9 Apr 2025` format. Prices should be in $150.00 format.",
                fields=[
                    ExtractionField(
                        name="Date",
                        type="string",
                        description="The date of the appointment",
                    ),
                    ExtractionField(
                        name="Copay",
                        type="string",
                        description="Amount of money the patient pays for the appointment",
                    ),
                    ExtractionField(
                        name="Confirmed as booked",
                        type="bool",
                        description="Is the appointment confirmed as booked?",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_extraction_schemas(
            name=name, prompt=prompt, fields=fields, project=project, request_options=request_options
        )
        return _response.data

    async def get_extraction_schemas_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetExtractionSchemasNameOrIdResponse:
        """
        Returns an extraction schema by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the extraction schema to get.

        project : typing.Optional[str]
            The name of the project containing the extraction schema. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetExtractionSchemasNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_extraction_schemas_name_or_id(
                name_or_id="nameOrId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_extraction_schemas_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    async def delete_extraction_schemas_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeleteExtractionSchemasNameOrIdResponse:
        """
        Deletes an extraction schema by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the extraction schema to delete.

        project : typing.Optional[str]
            The name of the project containing the extraction schema. Only used when `nameOrId` is a name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteExtractionSchemasNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_extraction_schemas_name_or_id(
                name_or_id="nameOrId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_extraction_schemas_name_or_id(
            name_or_id, project=project, request_options=request_options
        )
        return _response.data

    async def patch_extraction_schemas_name_or_id(
        self,
        name_or_id: str,
        *,
        project: typing.Optional[str] = None,
        name: typing.Optional[str] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        fields: typing.Optional[typing.Sequence[ExtractionField]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchExtractionSchemasNameOrIdResponse:
        """
        Updates an extraction schema by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the extraction schema to update.

        project : typing.Optional[str]
            The name of the project containing the extraction schema. Only used when `nameOrId` is a name.

        name : typing.Optional[str]
            A name for the extraction schema.

        prompt : typing.Optional[str]
            Instructions for how to extract data from conversations.

        fields : typing.Optional[typing.Sequence[ExtractionField]]
            Array of field definitions.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchExtractionSchemasNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic, ExtractionField

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.patch_extraction_schemas_name_or_id(
                name_or_id="nameOrId",
                name="Updated appointment details",
                prompt="Updated extraction instructions. Dates should be in `9 Apr 2025` format.",
                fields=[
                    ExtractionField(
                        name="Date",
                        type="string",
                        description="The date of the appointment",
                    ),
                    ExtractionField(
                        name="Time",
                        type="string",
                        description="The time of the appointment",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch_extraction_schemas_name_or_id(
            name_or_id, project=project, name=name, prompt=prompt, fields=fields, request_options=request_options
        )
        return _response.data

    async def get_voices(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetVoicesResponse:
        """
        Returns all available voices for a model.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetVoicesResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_voices()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_voices(request_options=request_options)
        return _response.data

    async def get_voices_id(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetVoicesIdResponse:
        """
        Returns a voice by ID.

        Parameters
        ----------
        id : str
            The ID of the voice to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetVoicesIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_voices_id(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_voices_id(id, request_options=request_options)
        return _response.data

    async def get_conversations(
        self,
        *,
        project: typing.Optional[str] = None,
        external_id: typing.Optional[str] = None,
        duration_min: typing.Optional[int] = None,
        duration_max: typing.Optional[int] = None,
        started_at_min: typing.Optional[str] = None,
        started_at_max: typing.Optional[str] = None,
        before: typing.Optional[str] = None,
        after: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetConversationsResponse:
        """
        Returns conversations with optional filtering.

        Parameters
        ----------
        project : typing.Optional[str]
            The name of the project to list conversations for.

        external_id : typing.Optional[str]
            Filter by external ID to get a specific conversation.

        duration_min : typing.Optional[int]
            Minimum duration in seconds.

        duration_max : typing.Optional[int]
            Maximum duration in seconds.

        started_at_min : typing.Optional[str]
            Minimum start date/time. Valid examples: `2025-04-17`, `2025-04-17T02:48:52.708Z`

        started_at_max : typing.Optional[str]
            Maximum start date/time. Valid examples: `2025-04-17`, `2025-04-17T02:48:52.708Z`

        before : typing.Optional[str]
            Cursor for pagination (before).

        after : typing.Optional[str]
            Cursor for pagination (after).

        limit : typing.Optional[int]
            Maximum number of conversations to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_conversations()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversations(
            project=project,
            external_id=external_id,
            duration_min=duration_min,
            duration_max=duration_max,
            started_at_min=started_at_min,
            started_at_max=started_at_max,
            before=before,
            after=after,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def get_conversations_id(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationsIdResponse:
        """
        Returns a conversation by ID.

        Parameters
        ----------
        id : str
            The ID of the conversation to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_conversations_id(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversations_id(id, request_options=request_options)
        return _response.data

    async def post_conversations_id_cancel(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PostConversationsIdCancelResponse:
        """
        Cancels an active conversation.

        Parameters
        ----------
        id : str
            The ID of the conversation to cancel.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostConversationsIdCancelResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_conversations_id_cancel(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_conversations_id_cancel(id, request_options=request_options)
        return _response.data

    async def get_conversations_id_analysis(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationsIdAnalysisResponse:
        """
        Returns an analysis of the specified conversation.

        Parameters
        ----------
        id : str
            The ID of the conversation to analyze.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsIdAnalysisResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_conversations_id_analysis(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversations_id_analysis(id, request_options=request_options)
        return _response.data

    async def get_conversations_id_extractions(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationsIdExtractionsResponse:
        """
        Returns all extractions for a conversation.

        Parameters
        ----------
        id : str
            The ID of the conversation to get extractions for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsIdExtractionsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_conversations_id_extractions(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversations_id_extractions(id, request_options=request_options)
        return _response.data

    async def post_conversations_id_extractions(
        self, id: str, *, schema_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostConversationsIdExtractionsResponse:
        """
        Extracts data from a conversation using a schema.

        Parameters
        ----------
        id : str
            The ID of the conversation to extract data from.

        schema_id : str
            ID of the extraction schema to use.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostConversationsIdExtractionsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_conversations_id_extractions(
                id="id",
                schema_id="conv_extract_schema_6458e4ac-533c-4bdf-8e6d-c2f06f87fd5c",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_conversations_id_extractions(
            id, schema_id=schema_id, request_options=request_options
        )
        return _response.data

    async def get_conversations_id_evals(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetConversationsIdEvalsResponse:
        """
        Returns all evaluations for a conversation.

        Parameters
        ----------
        id : str
            The ID of the conversation to get evaluations for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetConversationsIdEvalsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_conversations_id_evals(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_conversations_id_evals(id, request_options=request_options)
        return _response.data

    async def post_conversations_id_evals(
        self, id: str, *, prompt_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> ConversationEvaluationResult:
        """
        Evaluates a conversation using an evaluation prompt.

        Parameters
        ----------
        id : str
            The ID of the conversation to evaluate.

        prompt_id : str
            ID of the evaluation prompt to use.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConversationEvaluationResult
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_conversations_id_evals(
                id="id",
                prompt_id="conv_eval_prompt_d7cfe45d-35db-4ef6-a254-81ab1da76ce0",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_conversations_id_evals(
            id, prompt_id=prompt_id, request_options=request_options
        )
        return _response.data

    async def post_conversations_outbound_call(
        self,
        *,
        to_phone_number: str,
        config: typing.Optional[OutboundCallConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostConversationsOutboundCallResponse:
        """
        Initiates a call to a given phone number using Phonic's Twilio account.

        Parameters
        ----------
        to_phone_number : str
            The phone number to call in E.164 format.

        config : typing.Optional[OutboundCallConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostConversationsOutboundCallResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic, OutboundCallConfig

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_conversations_outbound_call(
                to_phone_number="+19189397081",
                config=OutboundCallConfig(
                    agent="support-agent",
                    welcome_message="Hi {{customer_name}}. How can I help you today?",
                    system_prompt="You are an expert in {{subject}}. Be friendly, helpful and concise.",
                    template_variables={"customer_name": "David", "subject": "Chess"},
                    voice_id="sarah",
                    no_input_poke_sec=30,
                    no_input_poke_text="Are you still there?",
                    no_input_end_conversation_sec=180,
                    boosted_keywords=["Load ID", "dispatch"],
                    tools=[],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_conversations_outbound_call(
            to_phone_number=to_phone_number, config=config, request_options=request_options
        )
        return _response.data

    async def post_conversations_sip_outbound_call(
        self,
        *,
        sip_address: str,
        from_phone_number: str,
        to_phone_number: str,
        token: typing.Optional[str] = None,
        downstream_websocket_url: typing.Optional[str] = None,
        sip_auth_username: typing.Optional[str] = None,
        sip_auth_password: typing.Optional[str] = None,
        config: typing.Optional[OutboundCallConfig] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PostConversationsSipOutboundCallResponse:
        """
        Initiates a SIP outbound call using user-supplied SIP credentials in headers.

        Parameters
        ----------
        sip_address : str
            SIP address of the user's SIP trunk. Required.

        from_phone_number : str
            Caller ID phone number in E.164 format.

        to_phone_number : str
            Destination phone number in E.164 format.

        token : typing.Optional[str]
            Optional session token used for STS authorization.

        downstream_websocket_url : typing.Optional[str]
            Optional downstream STS WebSocket URL to override the default.

        sip_auth_username : typing.Optional[str]
            SIP auth username, if your provider requires it.

        sip_auth_password : typing.Optional[str]
            SIP auth password, if your provider requires it.

        config : typing.Optional[OutboundCallConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostConversationsSipOutboundCallResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_conversations_sip_outbound_call(
                sip_address="X-Sip-Address",
                from_phone_number="from_phone_number",
                to_phone_number="to_phone_number",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_conversations_sip_outbound_call(
            sip_address=sip_address,
            from_phone_number=from_phone_number,
            to_phone_number=to_phone_number,
            token=token,
            downstream_websocket_url=downstream_websocket_url,
            sip_auth_username=sip_auth_username,
            sip_auth_password=sip_auth_password,
            config=config,
            request_options=request_options,
        )
        return _response.data

    async def get_projects(self, *, request_options: typing.Optional[RequestOptions] = None) -> GetProjectsResponse:
        """
        Returns all projects in a workspace.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetProjectsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_projects()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_projects(request_options=request_options)
        return _response.data

    async def post_projects(
        self, *, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostProjectsResponse:
        """
        Creates a new project in a workspace.

        Parameters
        ----------
        name : str
            The name of the project. Can only contain lowercase letters, numbers and hyphens. Must be unique within the workspace.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostProjectsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_projects(
                name="customer-support",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_projects(name=name, request_options=request_options)
        return _response.data

    async def get_projects_name_or_id(
        self, name_or_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetProjectsNameOrIdResponse:
        """
        Returns a project by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the project to get.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetProjectsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_projects_name_or_id(
                name_or_id="nameOrId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_projects_name_or_id(name_or_id, request_options=request_options)
        return _response.data

    async def delete_projects_name_or_id(
        self, name_or_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteProjectsNameOrIdResponse:
        """
        Deletes a project by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the project to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteProjectsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_projects_name_or_id(
                name_or_id="nameOrId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_projects_name_or_id(name_or_id, request_options=request_options)
        return _response.data

    async def patch_projects_name_or_id(
        self,
        name_or_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        default_agent: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PatchProjectsNameOrIdResponse:
        """
        Updates a project by name or ID.

        Parameters
        ----------
        name_or_id : str
            The name or the ID of the project to update.

        name : typing.Optional[str]
            The name of the project. Can only contain lowercase letters, numbers and hyphens. Must be unique within the workspace.

        default_agent : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PatchProjectsNameOrIdResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.patch_projects_name_or_id(
                name_or_id="nameOrId",
                name="updated-customer-support",
                default_agent="another-agent",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch_projects_name_or_id(
            name_or_id, name=name, default_agent=default_agent, request_options=request_options
        )
        return _response.data

    async def get_projects_id_conversation_eval_prompts(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetProjectsIdConversationEvalPromptsResponse:
        """
        Returns all conversation evaluation prompts for a project.

        Parameters
        ----------
        id : str
            The ID of the project.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetProjectsIdConversationEvalPromptsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_projects_id_conversation_eval_prompts(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_projects_id_conversation_eval_prompts(
            id, request_options=request_options
        )
        return _response.data

    async def post_projects_id_conversation_eval_prompts(
        self, id: str, *, name: str, prompt: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PostProjectsIdConversationEvalPromptsResponse:
        """
        Creates a new conversation evaluation prompt for a project.

        Parameters
        ----------
        id : str
            The ID of the project.

        name : str
            A useful name for referring to this prompt.

        prompt : str
            Actual evaluation prompt text to evaluate conversations with.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PostProjectsIdConversationEvalPromptsResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.post_projects_id_conversation_eval_prompts(
                id="id",
                name="test_prompt",
                prompt="The assistant used the word chocolate in the conversation",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_projects_id_conversation_eval_prompts(
            id, name=name, prompt=prompt, request_options=request_options
        )
        return _response.data
