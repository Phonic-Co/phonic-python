# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .agents.client import AgentsClient, AsyncAgentsClient
from .conversations.client import AsyncConversationsClient, ConversationsClient
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .environment import PhonicEnvironment
from .projects.client import AsyncProjectsClient, ProjectsClient
from .raw_client import AsyncRawPhonic, RawPhonic
from .sts.client import AsyncStsClient, StsClient
from .types.create_response import CreateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Phonic:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    environment : PhonicEnvironment
        The environment to use for requests from the client. from .environment import PhonicEnvironment



        Defaults to PhonicEnvironment.DEFAULT



    token : typing.Union[str, typing.Callable[[], str]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from phonic import Phonic

    client = Phonic(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        environment: PhonicEnvironment = PhonicEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            environment=environment,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawPhonic(client_wrapper=self._client_wrapper)
        self.agents = AgentsClient(client_wrapper=self._client_wrapper)
        self.conversations = ConversationsClient(client_wrapper=self._client_wrapper)
        self.projects = ProjectsClient(client_wrapper=self._client_wrapper)
        self.sts = StsClient(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawPhonic:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPhonic
        """
        return self._raw_client

    def create(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> CreateResponse:
        """
        Creates a new project in a workspace.

        Parameters
        ----------
        name : str
            The name of the project. Can only contain lowercase letters, numbers and hyphens. Must be unique within the workspace.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateResponse
            Success response

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            token="YOUR_TOKEN",
        )
        client.create(
            name="customer-support",
        )
        """
        _response = self._raw_client.create(name=name, request_options=request_options)
        return _response.data


class AsyncPhonic:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    environment : PhonicEnvironment
        The environment to use for requests from the client. from .environment import PhonicEnvironment



        Defaults to PhonicEnvironment.DEFAULT



    token : typing.Union[str, typing.Callable[[], str]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from phonic import AsyncPhonic

    client = AsyncPhonic(
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        environment: PhonicEnvironment = PhonicEnvironment.DEFAULT,
        token: typing.Union[str, typing.Callable[[], str]],
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            environment=environment,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawPhonic(client_wrapper=self._client_wrapper)
        self.agents = AsyncAgentsClient(client_wrapper=self._client_wrapper)
        self.conversations = AsyncConversationsClient(client_wrapper=self._client_wrapper)
        self.projects = AsyncProjectsClient(client_wrapper=self._client_wrapper)
        self.sts = AsyncStsClient(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPhonic:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPhonic
        """
        return self._raw_client

    async def create(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> CreateResponse:
        """
        Creates a new project in a workspace.

        Parameters
        ----------
        name : str
            The name of the project. Can only contain lowercase letters, numbers and hyphens. Must be unique within the workspace.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateResponse
            Success response

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.create(
                name="customer-support",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(name=name, request_options=request_options)
        return _response.data
