# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawAdminClient, RawAdminClient


class AdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAdminClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAdminClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAdminClient
        """
        return self._raw_client

    def create_voice(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            twilio_account_sid="YOUR_TWILIO_ACCOUNT_SID",
            token="YOUR_TOKEN",
        )
        client.admin.create_voice()
        """
        _response = self._raw_client.create_voice(request_options=request_options)
        return _response.data

    def create_latent(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            twilio_account_sid="YOUR_TWILIO_ACCOUNT_SID",
            token="YOUR_TOKEN",
        )
        client.admin.create_latent()
        """
        _response = self._raw_client.create_latent(request_options=request_options)
        return _response.data

    def list_voice_latents(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from phonic import Phonic

        client = Phonic(
            twilio_account_sid="YOUR_TWILIO_ACCOUNT_SID",
            token="YOUR_TOKEN",
        )
        client.admin.list_voice_latents()
        """
        _response = self._raw_client.list_voice_latents(request_options=request_options)
        return _response.data


class AsyncAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAdminClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAdminClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAdminClient
        """
        return self._raw_client

    async def create_voice(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            twilio_account_sid="YOUR_TWILIO_ACCOUNT_SID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.create_voice()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_voice(request_options=request_options)
        return _response.data

    async def create_latent(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            twilio_account_sid="YOUR_TWILIO_ACCOUNT_SID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.create_latent()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_latent(request_options=request_options)
        return _response.data

    async def list_voice_latents(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from phonic import AsyncPhonic

        client = AsyncPhonic(
            twilio_account_sid="YOUR_TWILIO_ACCOUNT_SID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.list_voice_latents()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_voice_latents(request_options=request_options)
        return _response.data
